#version 450

const vec3 g = vec3( 0., -0.98, 0. );
const float groundY = 0.0;
const float firctionCoefficient = 0.5;

#define DAMPING -0.1f
#define PI 3.14159265359
#define MinRadius 0.00001f

struct sConeEmitter
{
	float Radius;
	float Angle;				// in radians
	float StartSpeedMin;
	float StartSpeedMax;
	float StartDelayRangeMin;
	float StartDelayRangeMax;
	float LifeTimeRangeMin;
	float LifeTimeRangeMax;
	vec4 StartColor;
	vec4 ColorOverLifeTimeStart;
	vec4 ColorOverLifeTimeEnd;
	float StartSizeMin;
	float StartSizeMax;
	float NoiseMin;
	float NoiseMax;

};

struct sParticle
{
	vec3 Pos;
	float ElpasedTime;
	
	vec3 Vel;
	float LifeTime;

	vec4 ColorOverlay;

	float Volume;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer s_Particle 
{
   sParticle Particles[ ];
};

layout (std140, binding = 1) uniform sParticleSupportData 
{
	float dt;
	int bUseGravity;
};
layout (std140, binding = 2) uniform s_ConeEmitter 
{
	sConeEmitter EmitterData;
};
// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

float randomRange(float min, float max, float rnd)
{
	return rnd * (max - min) + min;
}

vec4 LerpV4(in vec4 a,in vec4 b, float t)
{
	return (b - a) * t + a;
}

layout( local_size_x = 16 ) in;

void NextParticle(inout sParticle oParticle)
{
	float R = clamp(EmitterData.Radius * sqrt(random(oParticle.Pos)), MinRadius, EmitterData.Radius);
	float theta = random(vec2(oParticle.Pos.x, oParticle.Pos.y)) * 2 * PI;
		
	vec3 oPos = vec3(0.0);
	float sinTheta = sin(theta);
	float cosTheta = cos(theta);
	oPos.x += R * cosTheta;
	oPos.z += R * sinTheta;
	oParticle.Pos = oPos;

	// Volume
	oParticle.Volume = randomRange(EmitterData.StartSizeMin, EmitterData.StartSizeMax,random(vec2(oParticle.Pos.z, oParticle.Pos.y)));

	// Velocity
	float PercentageToCenter = R / EmitterData.Radius;
	float Alpha = PercentageToCenter * EmitterData.Angle;
	float sinAlpha = sin(Alpha);
	float StartSpeed = randomRange(EmitterData.StartSpeedMin, EmitterData.StartSpeedMax, random(vec2(oParticle.Pos.x, oParticle.Pos.z)));
	oParticle.Vel = vec3(sinAlpha * cosTheta, cos(Alpha), sinAlpha * sinTheta) * StartSpeed;	// normalized * Start Speed
	
	// Time
	oParticle.LifeTime = randomRange(EmitterData.LifeTimeRangeMin, EmitterData.LifeTimeRangeMax, random(vec2(oParticle.Pos.y, oParticle.Pos.z)));
	oParticle.ElpasedTime = 0.0f;//-randomRange(EmitterData.StartDelayRangeMin, EmitterData.StartDelayRangeMax, random(vec2(oParticle.Vel.x, oParticle.Vel.z)));
}

bool isFloatZero(float f)
{
	return abs(f) < 0.0001;
}

const float frequency = 5;
void main()
{
	uint gid = gl_GlobalInvocationID.x; // the .y and .z are both 1 in this case
	Particles[gid].ElpasedTime += dt;
	// Only update particles with ElpasedTime greater than 0
	if(Particles[gid].ElpasedTime < 0)
	{
		return;
	}
	else if (Particles[gid].ElpasedTime >= Particles[gid].LifeTime)
	{
		NextParticle(Particles[gid]);
	}
	
	float lifePercent = Particles[gid].ElpasedTime / Particles[gid].LifeTime;

	vec3 p = Particles[gid].Pos;
	vec3 v = Particles[gid].Vel;
	vec3 a = DAMPING * v + vec3(0, 0.25, 0.0);
	if(p.y > groundY)
	{
		if(bUseGravity > 0)
		{
			a += g;
		}
	}
	else
	{
		// ground friction
		a += firctionCoefficient * (-g.y) * -normalize(vec3(v.x, 0, v.z));
	}

	// Enable noise if there is one
	if(!isFloatZero(EmitterData.NoiseMin) || !isFloatZero(EmitterData.NoiseMax))
	{
		vec3 aNoise = vec3(randomRange(EmitterData.NoiseMin, EmitterData.NoiseMax, random(v)), 0, randomRange(EmitterData.NoiseMin, EmitterData.NoiseMax, random(p)));
		a += aNoise;
	}
	
	vec3 pp = p + v * dt + 0.5 * dt * dt * a;
	vec3 vp = v + a * dt;

	if(pp.y <= groundY)
	{
		pp.y = groundY;
		// Lose half of the vertical velocity
		vp.y = abs(vp.y) * 0.5;
		if(vp.y <= 0.001)
			vp.y = 0;
	}

	// update particle data
	Particles[gid].Pos = pp;
	Particles[gid].Vel = vp;
	
	Particles[gid].ColorOverlay = LerpV4(EmitterData.StartColor * EmitterData.ColorOverLifeTimeStart, EmitterData.StartColor * EmitterData.ColorOverLifeTimeEnd, lifePercent);
}